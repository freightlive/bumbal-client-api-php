<?php
/**
 * RouteApi
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 1.0.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\BumbalClient\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BumbalClient\ApiException;
use BumbalClient\Configuration;
use BumbalClient\HeaderSelector;
use BumbalClient\ObjectSerializer;

/**
 * RouteApi Class Doc Comment
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createRoute
     *
     * Add a new Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object that needs to be created (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function createRoute($body = null)
    {
        list($response) = $this->createRouteWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createRouteWithHttpInfo
     *
     * Add a new Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object that needs to be created (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRouteWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->createRouteRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRouteAsync
     *
     * Add a new Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object that needs to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRouteAsync($body = null)
    {
        return $this->createRouteAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRouteAsyncWithHttpInfo
     *
     * Add a new Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object that needs to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRouteAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->createRouteRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRoute'
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object that needs to be created (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRouteRequest($body = null)
    {

        $resourcePath = '/route';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRoute
     *
     * Delete an Route
     *
     * @param  int $route_id ID of route to update (required)
     * @param  bool $cancel_activities Cancel activities on Route (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function deleteRoute($route_id, $cancel_activities)
    {
        list($response) = $this->deleteRouteWithHttpInfo($route_id, $cancel_activities);
        return $response;
    }

    /**
     * Operation deleteRouteWithHttpInfo
     *
     * Delete an Route
     *
     * @param  int $route_id ID of route to update (required)
     * @param  bool $cancel_activities Cancel activities on Route (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRouteWithHttpInfo($route_id, $cancel_activities)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->deleteRouteRequest($route_id, $cancel_activities);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRouteAsync
     *
     * Delete an Route
     *
     * @param  int $route_id ID of route to update (required)
     * @param  bool $cancel_activities Cancel activities on Route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRouteAsync($route_id, $cancel_activities)
    {
        return $this->deleteRouteAsyncWithHttpInfo($route_id, $cancel_activities)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRouteAsyncWithHttpInfo
     *
     * Delete an Route
     *
     * @param  int $route_id ID of route to update (required)
     * @param  bool $cancel_activities Cancel activities on Route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRouteAsyncWithHttpInfo($route_id, $cancel_activities)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->deleteRouteRequest($route_id, $cancel_activities);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRoute'
     *
     * @param  int $route_id ID of route to update (required)
     * @param  bool $cancel_activities Cancel activities on Route (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRouteRequest($route_id, $cancel_activities)
    {
        // verify the required parameter 'route_id' is set
        if ($route_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_id when calling deleteRoute'
            );
        }
        // verify the required parameter 'cancel_activities' is set
        if ($cancel_activities === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_activities when calling deleteRoute'
            );
        }

        $resourcePath = '/route/{routeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cancel_activities !== null) {
            $queryParams['cancel_activities'] = ObjectSerializer::toQueryValue($cancel_activities);
        }

        // path params
        if ($route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'routeId' . '}',
                ObjectSerializer::toPathValue($route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveListRoute
     *
     * Retrieve List of Routes
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteRetrieveListArguments $arguments Route RetrieveList Arguments (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\RouteListResponse
     */
    public function retrieveListRoute($arguments)
    {
        list($response) = $this->retrieveListRouteWithHttpInfo($arguments);
        return $response;
    }

    /**
     * Operation retrieveListRouteWithHttpInfo
     *
     * Retrieve List of Routes
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteRetrieveListArguments $arguments Route RetrieveList Arguments (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\RouteListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveListRouteWithHttpInfo($arguments)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\RouteListResponse';
        $request = $this->retrieveListRouteRequest($arguments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\RouteListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveListRouteAsync
     *
     * Retrieve List of Routes
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteRetrieveListArguments $arguments Route RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveListRouteAsync($arguments)
    {
        return $this->retrieveListRouteAsyncWithHttpInfo($arguments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveListRouteAsyncWithHttpInfo
     *
     * Retrieve List of Routes
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteRetrieveListArguments $arguments Route RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveListRouteAsyncWithHttpInfo($arguments)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\RouteListResponse';
        $request = $this->retrieveListRouteRequest($arguments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveListRoute'
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteRetrieveListArguments $arguments Route RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveListRouteRequest($arguments)
    {
        // verify the required parameter 'arguments' is set
        if ($arguments === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $arguments when calling retrieveListRoute'
            );
        }

        $resourcePath = '/route';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($arguments)) {
            $_tempBody = $arguments;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveRoute
     *
     * Retrieve a Route
     *
     * @param  int $route_id ID of route to retrieve (required)
     * @param  bool $include_address_object Include Address Objects (required)
     * @param  bool $include_route_status Include Status Name (required)
     * @param  bool $include_route_tags Include Tags (required)
     * @param  bool $include_driver_info Include Driver info (required)
     * @param  bool $include_equipment_info_car Include Equipment info car (required)
     * @param  bool $include_gps_locations Include GPS locations (required)
     * @param  bool $include_activity_ids Include Activity IDs (required)
     * @param  bool $include_latest_position Include Latest Known GPS location (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\RouteModel
     */
    public function retrieveRoute($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position)
    {
        list($response) = $this->retrieveRouteWithHttpInfo($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position);
        return $response;
    }

    /**
     * Operation retrieveRouteWithHttpInfo
     *
     * Retrieve a Route
     *
     * @param  int $route_id ID of route to retrieve (required)
     * @param  bool $include_address_object Include Address Objects (required)
     * @param  bool $include_route_status Include Status Name (required)
     * @param  bool $include_route_tags Include Tags (required)
     * @param  bool $include_driver_info Include Driver info (required)
     * @param  bool $include_equipment_info_car Include Equipment info car (required)
     * @param  bool $include_gps_locations Include GPS locations (required)
     * @param  bool $include_activity_ids Include Activity IDs (required)
     * @param  bool $include_latest_position Include Latest Known GPS location (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\RouteModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveRouteWithHttpInfo($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\RouteModel';
        $request = $this->retrieveRouteRequest($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\RouteModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveRouteAsync
     *
     * Retrieve a Route
     *
     * @param  int $route_id ID of route to retrieve (required)
     * @param  bool $include_address_object Include Address Objects (required)
     * @param  bool $include_route_status Include Status Name (required)
     * @param  bool $include_route_tags Include Tags (required)
     * @param  bool $include_driver_info Include Driver info (required)
     * @param  bool $include_equipment_info_car Include Equipment info car (required)
     * @param  bool $include_gps_locations Include GPS locations (required)
     * @param  bool $include_activity_ids Include Activity IDs (required)
     * @param  bool $include_latest_position Include Latest Known GPS location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveRouteAsync($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position)
    {
        return $this->retrieveRouteAsyncWithHttpInfo($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveRouteAsyncWithHttpInfo
     *
     * Retrieve a Route
     *
     * @param  int $route_id ID of route to retrieve (required)
     * @param  bool $include_address_object Include Address Objects (required)
     * @param  bool $include_route_status Include Status Name (required)
     * @param  bool $include_route_tags Include Tags (required)
     * @param  bool $include_driver_info Include Driver info (required)
     * @param  bool $include_equipment_info_car Include Equipment info car (required)
     * @param  bool $include_gps_locations Include GPS locations (required)
     * @param  bool $include_activity_ids Include Activity IDs (required)
     * @param  bool $include_latest_position Include Latest Known GPS location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveRouteAsyncWithHttpInfo($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\RouteModel';
        $request = $this->retrieveRouteRequest($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveRoute'
     *
     * @param  int $route_id ID of route to retrieve (required)
     * @param  bool $include_address_object Include Address Objects (required)
     * @param  bool $include_route_status Include Status Name (required)
     * @param  bool $include_route_tags Include Tags (required)
     * @param  bool $include_driver_info Include Driver info (required)
     * @param  bool $include_equipment_info_car Include Equipment info car (required)
     * @param  bool $include_gps_locations Include GPS locations (required)
     * @param  bool $include_activity_ids Include Activity IDs (required)
     * @param  bool $include_latest_position Include Latest Known GPS location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveRouteRequest($route_id, $include_address_object, $include_route_status, $include_route_tags, $include_driver_info, $include_equipment_info_car, $include_gps_locations, $include_activity_ids, $include_latest_position)
    {
        // verify the required parameter 'route_id' is set
        if ($route_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_id when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_address_object' is set
        if ($include_address_object === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_address_object when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_route_status' is set
        if ($include_route_status === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_route_status when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_route_tags' is set
        if ($include_route_tags === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_route_tags when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_driver_info' is set
        if ($include_driver_info === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_driver_info when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_equipment_info_car' is set
        if ($include_equipment_info_car === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_equipment_info_car when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_gps_locations' is set
        if ($include_gps_locations === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_gps_locations when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_activity_ids' is set
        if ($include_activity_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_ids when calling retrieveRoute'
            );
        }
        // verify the required parameter 'include_latest_position' is set
        if ($include_latest_position === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_latest_position when calling retrieveRoute'
            );
        }

        $resourcePath = '/route/{routeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_address_object !== null) {
            $queryParams['include_address_object'] = ObjectSerializer::toQueryValue($include_address_object);
        }
        // query params
        if ($include_route_status !== null) {
            $queryParams['include_route_status'] = ObjectSerializer::toQueryValue($include_route_status);
        }
        // query params
        if ($include_route_tags !== null) {
            $queryParams['include_route_tags'] = ObjectSerializer::toQueryValue($include_route_tags);
        }
        // query params
        if ($include_driver_info !== null) {
            $queryParams['include_driver_info'] = ObjectSerializer::toQueryValue($include_driver_info);
        }
        // query params
        if ($include_equipment_info_car !== null) {
            $queryParams['include_equipment_info_car'] = ObjectSerializer::toQueryValue($include_equipment_info_car);
        }
        // query params
        if ($include_gps_locations !== null) {
            $queryParams['include_gps_locations'] = ObjectSerializer::toQueryValue($include_gps_locations);
        }
        // query params
        if ($include_activity_ids !== null) {
            $queryParams['include_activity_ids'] = ObjectSerializer::toQueryValue($include_activity_ids);
        }
        // query params
        if ($include_latest_position !== null) {
            $queryParams['include_latest_position'] = ObjectSerializer::toQueryValue($include_latest_position);
        }

        // path params
        if ($route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'routeId' . '}',
                ObjectSerializer::toPathValue($route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setRoute
     *
     * Set (create or update) an Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function setRoute($body = null)
    {
        list($response) = $this->setRouteWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation setRouteWithHttpInfo
     *
     * Set (create or update) an Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRouteWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->setRouteRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setRouteAsync
     *
     * Set (create or update) an Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRouteAsync($body = null)
    {
        return $this->setRouteAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setRouteAsyncWithHttpInfo
     *
     * Set (create or update) an Route
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRouteAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->setRouteRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setRoute'
     *
     * @param  \BumbalClient\BumbalClient\Model\RouteModel $body Route object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setRouteRequest($body = null)
    {

        $resourcePath = '/route/set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRoute
     *
     * Update a Route
     *
     * @param  int $route_id ID of route to update (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function updateRoute($route_id)
    {
        list($response) = $this->updateRouteWithHttpInfo($route_id);
        return $response;
    }

    /**
     * Operation updateRouteWithHttpInfo
     *
     * Update a Route
     *
     * @param  int $route_id ID of route to update (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRouteWithHttpInfo($route_id)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->updateRouteRequest($route_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRouteAsync
     *
     * Update a Route
     *
     * @param  int $route_id ID of route to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRouteAsync($route_id)
    {
        return $this->updateRouteAsyncWithHttpInfo($route_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRouteAsyncWithHttpInfo
     *
     * Update a Route
     *
     * @param  int $route_id ID of route to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRouteAsyncWithHttpInfo($route_id)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->updateRouteRequest($route_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRoute'
     *
     * @param  int $route_id ID of route to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateRouteRequest($route_id)
    {
        // verify the required parameter 'route_id' is set
        if ($route_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $route_id when calling updateRoute'
            );
        }

        $resourcePath = '/route/{routeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($route_id !== null) {
            $resourcePath = str_replace(
                '{' . 'routeId' . '}',
                ObjectSerializer::toPathValue($route_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
