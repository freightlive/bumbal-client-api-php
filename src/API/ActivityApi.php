<?php
/**
 * ActivityApi
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\BumbalClient\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BumbalClient\ApiException;
use BumbalClient\Configuration;
use BumbalClient\HeaderSelector;
use BumbalClient\ObjectSerializer;

/**
 * ActivityApi Class Doc Comment
 *
 * @category Class
 * @package  BumbalClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteActivity
     *
     * Delete an activity
     *
     * @param  int $activity_id ID of the activity to delete (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function deleteActivity($activity_id)
    {
        list($response) = $this->deleteActivityWithHttpInfo($activity_id);
        return $response;
    }

    /**
     * Operation deleteActivityWithHttpInfo
     *
     * Delete an activity
     *
     * @param  int $activity_id ID of the activity to delete (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteActivityWithHttpInfo($activity_id)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->deleteActivityRequest($activity_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteActivityAsync
     *
     * Delete an activity
     *
     * @param  int $activity_id ID of the activity to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteActivityAsync($activity_id)
    {
        return $this->deleteActivityAsyncWithHttpInfo($activity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteActivityAsyncWithHttpInfo
     *
     * Delete an activity
     *
     * @param  int $activity_id ID of the activity to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteActivityAsyncWithHttpInfo($activity_id)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->deleteActivityRequest($activity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteActivity'
     *
     * @param  int $activity_id ID of the activity to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteActivityRequest($activity_id)
    {
        // verify the required parameter 'activity_id' is set
        if ($activity_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_id when calling deleteActivity'
            );
        }

        $resourcePath = '/activity/{activityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'activityId' . '}',
                ObjectSerializer::toPathValue($activity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveActivity
     *
     * Find activity by ID
     *
     * @param  int $activity_id ID of activity to return (required)
     * @param  bool $include_activity_status Show the text value of the status (required)
     * @param  bool $include_activity_type_name Show the text value of the activity type (required)
     * @param  bool $include_activity_meta_data Include meta data connected to this Activity (required)
     * @param  bool $include_address_object Include address data (required)
     * @param  bool $include_time_slots Include TimeSlots (required)
     * @param  bool $include_time_slot_tags Include tags from TimeSlots (required)
     * @param  bool $include_route_info Include route data (required)
     * @param  bool $include_route Include Route (required)
     * @param  bool $include_package_lines Include package lines (required)
     * @param  bool $include_package_lines_info Include PackageLines (required)
     * @param  bool $include_driver_info Include driver data (required)
     * @param  bool $include_communication Include Communication Settings (required)
     * @param  bool $include_communication_object Include Communication Object (required)
     * @param  bool $include_activity_links Include Link Data (required)
     * @param  bool $include_activity_files Include files (required)
     * @param  bool $include_activity_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_nr Include Assignment Nr (required)
     * @param  bool $include_assignment Include Assignment (required)
     * @param  bool $include_activity_tags Include Activity Tags (required)
     * @param  bool $include_tag_type_name Include Activity Tag type names (required)
     * @param  bool $include_activity_record_info Include Activity Info (required)
     * @param  bool $include_activity_notes Include Activity Notes (required)
     * @param  bool $include_activity_note_tags Include Activity Note Tags (required)
     * @param  bool $include_depot_address_object Include Depot Address Object (required)
     * @param  bool $include_capacity_object Include Capacity Object (required)
     * @param  bool $include_zones Include Zones (required)
     * @param  bool $include_brand Include brand (required)
     * @param  bool $include_brand_colours Include brand colours (required)
     * @param  bool $include_brand_files Include brand files (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ActivityModel
     */
    public function retrieveActivity($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files)
    {
        list($response) = $this->retrieveActivityWithHttpInfo($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files);
        return $response;
    }

    /**
     * Operation retrieveActivityWithHttpInfo
     *
     * Find activity by ID
     *
     * @param  int $activity_id ID of activity to return (required)
     * @param  bool $include_activity_status Show the text value of the status (required)
     * @param  bool $include_activity_type_name Show the text value of the activity type (required)
     * @param  bool $include_activity_meta_data Include meta data connected to this Activity (required)
     * @param  bool $include_address_object Include address data (required)
     * @param  bool $include_time_slots Include TimeSlots (required)
     * @param  bool $include_time_slot_tags Include tags from TimeSlots (required)
     * @param  bool $include_route_info Include route data (required)
     * @param  bool $include_route Include Route (required)
     * @param  bool $include_package_lines Include package lines (required)
     * @param  bool $include_package_lines_info Include PackageLines (required)
     * @param  bool $include_driver_info Include driver data (required)
     * @param  bool $include_communication Include Communication Settings (required)
     * @param  bool $include_communication_object Include Communication Object (required)
     * @param  bool $include_activity_links Include Link Data (required)
     * @param  bool $include_activity_files Include files (required)
     * @param  bool $include_activity_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_nr Include Assignment Nr (required)
     * @param  bool $include_assignment Include Assignment (required)
     * @param  bool $include_activity_tags Include Activity Tags (required)
     * @param  bool $include_tag_type_name Include Activity Tag type names (required)
     * @param  bool $include_activity_record_info Include Activity Info (required)
     * @param  bool $include_activity_notes Include Activity Notes (required)
     * @param  bool $include_activity_note_tags Include Activity Note Tags (required)
     * @param  bool $include_depot_address_object Include Depot Address Object (required)
     * @param  bool $include_capacity_object Include Capacity Object (required)
     * @param  bool $include_zones Include Zones (required)
     * @param  bool $include_brand Include brand (required)
     * @param  bool $include_brand_colours Include brand colours (required)
     * @param  bool $include_brand_files Include brand files (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ActivityModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveActivityWithHttpInfo($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ActivityModel';
        $request = $this->retrieveActivityRequest($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ActivityModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveActivityAsync
     *
     * Find activity by ID
     *
     * @param  int $activity_id ID of activity to return (required)
     * @param  bool $include_activity_status Show the text value of the status (required)
     * @param  bool $include_activity_type_name Show the text value of the activity type (required)
     * @param  bool $include_activity_meta_data Include meta data connected to this Activity (required)
     * @param  bool $include_address_object Include address data (required)
     * @param  bool $include_time_slots Include TimeSlots (required)
     * @param  bool $include_time_slot_tags Include tags from TimeSlots (required)
     * @param  bool $include_route_info Include route data (required)
     * @param  bool $include_route Include Route (required)
     * @param  bool $include_package_lines Include package lines (required)
     * @param  bool $include_package_lines_info Include PackageLines (required)
     * @param  bool $include_driver_info Include driver data (required)
     * @param  bool $include_communication Include Communication Settings (required)
     * @param  bool $include_communication_object Include Communication Object (required)
     * @param  bool $include_activity_links Include Link Data (required)
     * @param  bool $include_activity_files Include files (required)
     * @param  bool $include_activity_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_nr Include Assignment Nr (required)
     * @param  bool $include_assignment Include Assignment (required)
     * @param  bool $include_activity_tags Include Activity Tags (required)
     * @param  bool $include_tag_type_name Include Activity Tag type names (required)
     * @param  bool $include_activity_record_info Include Activity Info (required)
     * @param  bool $include_activity_notes Include Activity Notes (required)
     * @param  bool $include_activity_note_tags Include Activity Note Tags (required)
     * @param  bool $include_depot_address_object Include Depot Address Object (required)
     * @param  bool $include_capacity_object Include Capacity Object (required)
     * @param  bool $include_zones Include Zones (required)
     * @param  bool $include_brand Include brand (required)
     * @param  bool $include_brand_colours Include brand colours (required)
     * @param  bool $include_brand_files Include brand files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveActivityAsync($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files)
    {
        return $this->retrieveActivityAsyncWithHttpInfo($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveActivityAsyncWithHttpInfo
     *
     * Find activity by ID
     *
     * @param  int $activity_id ID of activity to return (required)
     * @param  bool $include_activity_status Show the text value of the status (required)
     * @param  bool $include_activity_type_name Show the text value of the activity type (required)
     * @param  bool $include_activity_meta_data Include meta data connected to this Activity (required)
     * @param  bool $include_address_object Include address data (required)
     * @param  bool $include_time_slots Include TimeSlots (required)
     * @param  bool $include_time_slot_tags Include tags from TimeSlots (required)
     * @param  bool $include_route_info Include route data (required)
     * @param  bool $include_route Include Route (required)
     * @param  bool $include_package_lines Include package lines (required)
     * @param  bool $include_package_lines_info Include PackageLines (required)
     * @param  bool $include_driver_info Include driver data (required)
     * @param  bool $include_communication Include Communication Settings (required)
     * @param  bool $include_communication_object Include Communication Object (required)
     * @param  bool $include_activity_links Include Link Data (required)
     * @param  bool $include_activity_files Include files (required)
     * @param  bool $include_activity_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_nr Include Assignment Nr (required)
     * @param  bool $include_assignment Include Assignment (required)
     * @param  bool $include_activity_tags Include Activity Tags (required)
     * @param  bool $include_tag_type_name Include Activity Tag type names (required)
     * @param  bool $include_activity_record_info Include Activity Info (required)
     * @param  bool $include_activity_notes Include Activity Notes (required)
     * @param  bool $include_activity_note_tags Include Activity Note Tags (required)
     * @param  bool $include_depot_address_object Include Depot Address Object (required)
     * @param  bool $include_capacity_object Include Capacity Object (required)
     * @param  bool $include_zones Include Zones (required)
     * @param  bool $include_brand Include brand (required)
     * @param  bool $include_brand_colours Include brand colours (required)
     * @param  bool $include_brand_files Include brand files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveActivityAsyncWithHttpInfo($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ActivityModel';
        $request = $this->retrieveActivityRequest($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveActivity'
     *
     * @param  int $activity_id ID of activity to return (required)
     * @param  bool $include_activity_status Show the text value of the status (required)
     * @param  bool $include_activity_type_name Show the text value of the activity type (required)
     * @param  bool $include_activity_meta_data Include meta data connected to this Activity (required)
     * @param  bool $include_address_object Include address data (required)
     * @param  bool $include_time_slots Include TimeSlots (required)
     * @param  bool $include_time_slot_tags Include tags from TimeSlots (required)
     * @param  bool $include_route_info Include route data (required)
     * @param  bool $include_route Include Route (required)
     * @param  bool $include_package_lines Include package lines (required)
     * @param  bool $include_package_lines_info Include PackageLines (required)
     * @param  bool $include_driver_info Include driver data (required)
     * @param  bool $include_communication Include Communication Settings (required)
     * @param  bool $include_communication_object Include Communication Object (required)
     * @param  bool $include_activity_links Include Link Data (required)
     * @param  bool $include_activity_files Include files (required)
     * @param  bool $include_activity_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_nr Include Assignment Nr (required)
     * @param  bool $include_assignment Include Assignment (required)
     * @param  bool $include_activity_tags Include Activity Tags (required)
     * @param  bool $include_tag_type_name Include Activity Tag type names (required)
     * @param  bool $include_activity_record_info Include Activity Info (required)
     * @param  bool $include_activity_notes Include Activity Notes (required)
     * @param  bool $include_activity_note_tags Include Activity Note Tags (required)
     * @param  bool $include_depot_address_object Include Depot Address Object (required)
     * @param  bool $include_capacity_object Include Capacity Object (required)
     * @param  bool $include_zones Include Zones (required)
     * @param  bool $include_brand Include brand (required)
     * @param  bool $include_brand_colours Include brand colours (required)
     * @param  bool $include_brand_files Include brand files (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveActivityRequest($activity_id, $include_activity_status, $include_activity_type_name, $include_activity_meta_data, $include_address_object, $include_time_slots, $include_time_slot_tags, $include_route_info, $include_route, $include_package_lines, $include_package_lines_info, $include_driver_info, $include_communication, $include_communication_object, $include_activity_links, $include_activity_files, $include_activity_files_meta_data, $include_assignment_nr, $include_assignment, $include_activity_tags, $include_tag_type_name, $include_activity_record_info, $include_activity_notes, $include_activity_note_tags, $include_depot_address_object, $include_capacity_object, $include_zones, $include_brand, $include_brand_colours, $include_brand_files)
    {
        // verify the required parameter 'activity_id' is set
        if ($activity_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_id when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_status' is set
        if ($include_activity_status === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_status when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_type_name' is set
        if ($include_activity_type_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_type_name when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_meta_data' is set
        if ($include_activity_meta_data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_meta_data when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_address_object' is set
        if ($include_address_object === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_address_object when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_time_slots' is set
        if ($include_time_slots === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_time_slots when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_time_slot_tags' is set
        if ($include_time_slot_tags === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_time_slot_tags when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_route_info' is set
        if ($include_route_info === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_route_info when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_route' is set
        if ($include_route === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_route when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_package_lines' is set
        if ($include_package_lines === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_package_lines when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_package_lines_info' is set
        if ($include_package_lines_info === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_package_lines_info when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_driver_info' is set
        if ($include_driver_info === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_driver_info when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_communication' is set
        if ($include_communication === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_communication when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_communication_object' is set
        if ($include_communication_object === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_communication_object when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_links' is set
        if ($include_activity_links === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_links when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_files' is set
        if ($include_activity_files === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_files when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_files_meta_data' is set
        if ($include_activity_files_meta_data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_files_meta_data when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_assignment_nr' is set
        if ($include_assignment_nr === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_assignment_nr when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_assignment' is set
        if ($include_assignment === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_assignment when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_tags' is set
        if ($include_activity_tags === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_tags when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_tag_type_name' is set
        if ($include_tag_type_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_tag_type_name when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_record_info' is set
        if ($include_activity_record_info === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_record_info when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_notes' is set
        if ($include_activity_notes === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_notes when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_activity_note_tags' is set
        if ($include_activity_note_tags === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_activity_note_tags when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_depot_address_object' is set
        if ($include_depot_address_object === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_depot_address_object when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_capacity_object' is set
        if ($include_capacity_object === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_capacity_object when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_zones' is set
        if ($include_zones === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_zones when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_brand' is set
        if ($include_brand === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_brand when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_brand_colours' is set
        if ($include_brand_colours === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_brand_colours when calling retrieveActivity'
            );
        }
        // verify the required parameter 'include_brand_files' is set
        if ($include_brand_files === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_brand_files when calling retrieveActivity'
            );
        }

        $resourcePath = '/activity/{activityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_activity_status !== null) {
            $queryParams['include_activity_status'] = ObjectSerializer::toQueryValue($include_activity_status);
        }
        // query params
        if ($include_activity_type_name !== null) {
            $queryParams['include_activity_type_name'] = ObjectSerializer::toQueryValue($include_activity_type_name);
        }
        // query params
        if ($include_activity_meta_data !== null) {
            $queryParams['include_activity_meta_data'] = ObjectSerializer::toQueryValue($include_activity_meta_data);
        }
        // query params
        if ($include_address_object !== null) {
            $queryParams['include_address_object'] = ObjectSerializer::toQueryValue($include_address_object);
        }
        // query params
        if ($include_time_slots !== null) {
            $queryParams['include_time_slots'] = ObjectSerializer::toQueryValue($include_time_slots);
        }
        // query params
        if ($include_time_slot_tags !== null) {
            $queryParams['include_time_slot_tags'] = ObjectSerializer::toQueryValue($include_time_slot_tags);
        }
        // query params
        if ($include_route_info !== null) {
            $queryParams['include_route_info'] = ObjectSerializer::toQueryValue($include_route_info);
        }
        // query params
        if ($include_route !== null) {
            $queryParams['include_route'] = ObjectSerializer::toQueryValue($include_route);
        }
        // query params
        if ($include_package_lines !== null) {
            $queryParams['include_package_lines'] = ObjectSerializer::toQueryValue($include_package_lines);
        }
        // query params
        if ($include_package_lines_info !== null) {
            $queryParams['include_package_lines_info'] = ObjectSerializer::toQueryValue($include_package_lines_info);
        }
        // query params
        if ($include_driver_info !== null) {
            $queryParams['include_driver_info'] = ObjectSerializer::toQueryValue($include_driver_info);
        }
        // query params
        if ($include_communication !== null) {
            $queryParams['include_communication'] = ObjectSerializer::toQueryValue($include_communication);
        }
        // query params
        if ($include_communication_object !== null) {
            $queryParams['include_communication_object'] = ObjectSerializer::toQueryValue($include_communication_object);
        }
        // query params
        if ($include_activity_links !== null) {
            $queryParams['include_activity_links'] = ObjectSerializer::toQueryValue($include_activity_links);
        }
        // query params
        if ($include_activity_files !== null) {
            $queryParams['include_activity_files'] = ObjectSerializer::toQueryValue($include_activity_files);
        }
        // query params
        if ($include_activity_files_meta_data !== null) {
            $queryParams['include_activity_files_meta_data'] = ObjectSerializer::toQueryValue($include_activity_files_meta_data);
        }
        // query params
        if ($include_assignment_nr !== null) {
            $queryParams['include_assignment_nr'] = ObjectSerializer::toQueryValue($include_assignment_nr);
        }
        // query params
        if ($include_assignment !== null) {
            $queryParams['include_assignment'] = ObjectSerializer::toQueryValue($include_assignment);
        }
        // query params
        if ($include_activity_tags !== null) {
            $queryParams['include_activity_tags'] = ObjectSerializer::toQueryValue($include_activity_tags);
        }
        // query params
        if ($include_tag_type_name !== null) {
            $queryParams['include_tag_type_name'] = ObjectSerializer::toQueryValue($include_tag_type_name);
        }
        // query params
        if ($include_activity_record_info !== null) {
            $queryParams['include_activity_record_info'] = ObjectSerializer::toQueryValue($include_activity_record_info);
        }
        // query params
        if ($include_activity_notes !== null) {
            $queryParams['include_activity_notes'] = ObjectSerializer::toQueryValue($include_activity_notes);
        }
        // query params
        if ($include_activity_note_tags !== null) {
            $queryParams['include_activity_note_tags'] = ObjectSerializer::toQueryValue($include_activity_note_tags);
        }
        // query params
        if ($include_depot_address_object !== null) {
            $queryParams['include_depot_address_object'] = ObjectSerializer::toQueryValue($include_depot_address_object);
        }
        // query params
        if ($include_capacity_object !== null) {
            $queryParams['include_capacity_object'] = ObjectSerializer::toQueryValue($include_capacity_object);
        }
        // query params
        if ($include_zones !== null) {
            $queryParams['include_zones'] = ObjectSerializer::toQueryValue($include_zones);
        }
        // query params
        if ($include_brand !== null) {
            $queryParams['include_brand'] = ObjectSerializer::toQueryValue($include_brand);
        }
        // query params
        if ($include_brand_colours !== null) {
            $queryParams['include_brand_colours'] = ObjectSerializer::toQueryValue($include_brand_colours);
        }
        // query params
        if ($include_brand_files !== null) {
            $queryParams['include_brand_files'] = ObjectSerializer::toQueryValue($include_brand_files);
        }

        // path params
        if ($activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'activityId' . '}',
                ObjectSerializer::toPathValue($activity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveListActivity
     *
     * Retrieve List of Activities
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityRetrieveListArguments $arguments Activity RetrieveList Arguments (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ActivityListResponse
     */
    public function retrieveListActivity($arguments)
    {
        list($response) = $this->retrieveListActivityWithHttpInfo($arguments);
        return $response;
    }

    /**
     * Operation retrieveListActivityWithHttpInfo
     *
     * Retrieve List of Activities
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityRetrieveListArguments $arguments Activity RetrieveList Arguments (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ActivityListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveListActivityWithHttpInfo($arguments)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ActivityListResponse';
        $request = $this->retrieveListActivityRequest($arguments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ActivityListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveListActivityAsync
     *
     * Retrieve List of Activities
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityRetrieveListArguments $arguments Activity RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveListActivityAsync($arguments)
    {
        return $this->retrieveListActivityAsyncWithHttpInfo($arguments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveListActivityAsyncWithHttpInfo
     *
     * Retrieve List of Activities
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityRetrieveListArguments $arguments Activity RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveListActivityAsyncWithHttpInfo($arguments)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ActivityListResponse';
        $request = $this->retrieveListActivityRequest($arguments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveListActivity'
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityRetrieveListArguments $arguments Activity RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveListActivityRequest($arguments)
    {
        // verify the required parameter 'arguments' is set
        if ($arguments === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $arguments when calling retrieveListActivity'
            );
        }

        $resourcePath = '/activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($arguments)) {
            $_tempBody = $arguments;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setActivity
     *
     * Set (create or update) an Activity
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function setActivity($body = null)
    {
        list($response) = $this->setActivityWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation setActivityWithHttpInfo
     *
     * Set (create or update) an Activity
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setActivityWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->setActivityRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setActivityAsync
     *
     * Set (create or update) an Activity
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setActivityAsync($body = null)
    {
        return $this->setActivityAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setActivityAsyncWithHttpInfo
     *
     * Set (create or update) an Activity
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setActivityAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->setActivityRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setActivity'
     *
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setActivityRequest($body = null)
    {

        $resourcePath = '/activity/set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateActivity
     *
     * Update a activity
     *
     * @param  int $activity_id ID of activity to update (required)
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object that needs to be updated (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function updateActivity($activity_id, $body = null)
    {
        list($response) = $this->updateActivityWithHttpInfo($activity_id, $body);
        return $response;
    }

    /**
     * Operation updateActivityWithHttpInfo
     *
     * Update a activity
     *
     * @param  int $activity_id ID of activity to update (required)
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object that needs to be updated (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateActivityWithHttpInfo($activity_id, $body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->updateActivityRequest($activity_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateActivityAsync
     *
     * Update a activity
     *
     * @param  int $activity_id ID of activity to update (required)
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object that needs to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateActivityAsync($activity_id, $body = null)
    {
        return $this->updateActivityAsyncWithHttpInfo($activity_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateActivityAsyncWithHttpInfo
     *
     * Update a activity
     *
     * @param  int $activity_id ID of activity to update (required)
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object that needs to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateActivityAsyncWithHttpInfo($activity_id, $body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->updateActivityRequest($activity_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateActivity'
     *
     * @param  int $activity_id ID of activity to update (required)
     * @param  \BumbalClient\BumbalClient\Model\ActivityModel $body Activity object that needs to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateActivityRequest($activity_id, $body = null)
    {
        // verify the required parameter 'activity_id' is set
        if ($activity_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activity_id when calling updateActivity'
            );
        }

        $resourcePath = '/activity/{activityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($activity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'activityId' . '}',
                ObjectSerializer::toPathValue($activity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
