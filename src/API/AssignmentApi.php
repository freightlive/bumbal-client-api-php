<?php
/**
 * AssignmentApi
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\BumbalClient\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BumbalClient\ApiException;
use BumbalClient\Configuration;
use BumbalClient\HeaderSelector;
use BumbalClient\ObjectSerializer;

/**
 * AssignmentApi Class Doc Comment
 *
 * @category Class
 * @package  BumbalClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssignmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAssignment
     *
     * Delete an assignment
     *
     * @param  int $assignment_id ID of the assignment to delete (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function deleteAssignment($assignment_id)
    {
        list($response) = $this->deleteAssignmentWithHttpInfo($assignment_id);
        return $response;
    }

    /**
     * Operation deleteAssignmentWithHttpInfo
     *
     * Delete an assignment
     *
     * @param  int $assignment_id ID of the assignment to delete (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssignmentWithHttpInfo($assignment_id)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->deleteAssignmentRequest($assignment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssignmentAsync
     *
     * Delete an assignment
     *
     * @param  int $assignment_id ID of the assignment to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssignmentAsync($assignment_id)
    {
        return $this->deleteAssignmentAsyncWithHttpInfo($assignment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAssignmentAsyncWithHttpInfo
     *
     * Delete an assignment
     *
     * @param  int $assignment_id ID of the assignment to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssignmentAsyncWithHttpInfo($assignment_id)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->deleteAssignmentRequest($assignment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAssignment'
     *
     * @param  int $assignment_id ID of the assignment to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssignmentRequest($assignment_id)
    {
        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling deleteAssignment'
            );
        }

        $resourcePath = '/assignment/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveAssignment
     *
     * Find assignment by ID
     *
     * @param  int $assignment_id ID of assignment to return (required)
     * @param  bool $include_assignment_links Include Link Data (required)
     * @param  bool $include_assignment_files Include files (required)
     * @param  bool $include_assignment_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_files_meta_data_objects Include files meta data objects (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\AssignmentModel
     */
    public function retrieveAssignment($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects)
    {
        list($response) = $this->retrieveAssignmentWithHttpInfo($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects);
        return $response;
    }

    /**
     * Operation retrieveAssignmentWithHttpInfo
     *
     * Find assignment by ID
     *
     * @param  int $assignment_id ID of assignment to return (required)
     * @param  bool $include_assignment_links Include Link Data (required)
     * @param  bool $include_assignment_files Include files (required)
     * @param  bool $include_assignment_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_files_meta_data_objects Include files meta data objects (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\AssignmentModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveAssignmentWithHttpInfo($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\AssignmentModel';
        $request = $this->retrieveAssignmentRequest($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\AssignmentModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveAssignmentAsync
     *
     * Find assignment by ID
     *
     * @param  int $assignment_id ID of assignment to return (required)
     * @param  bool $include_assignment_links Include Link Data (required)
     * @param  bool $include_assignment_files Include files (required)
     * @param  bool $include_assignment_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_files_meta_data_objects Include files meta data objects (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAssignmentAsync($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects)
    {
        return $this->retrieveAssignmentAsyncWithHttpInfo($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveAssignmentAsyncWithHttpInfo
     *
     * Find assignment by ID
     *
     * @param  int $assignment_id ID of assignment to return (required)
     * @param  bool $include_assignment_links Include Link Data (required)
     * @param  bool $include_assignment_files Include files (required)
     * @param  bool $include_assignment_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_files_meta_data_objects Include files meta data objects (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAssignmentAsyncWithHttpInfo($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\AssignmentModel';
        $request = $this->retrieveAssignmentRequest($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveAssignment'
     *
     * @param  int $assignment_id ID of assignment to return (required)
     * @param  bool $include_assignment_links Include Link Data (required)
     * @param  bool $include_assignment_files Include files (required)
     * @param  bool $include_assignment_files_meta_data Include files meta data (required)
     * @param  bool $include_assignment_files_meta_data_objects Include files meta data objects (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveAssignmentRequest($assignment_id, $include_assignment_links, $include_assignment_files, $include_assignment_files_meta_data, $include_assignment_files_meta_data_objects)
    {
        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling retrieveAssignment'
            );
        }
        // verify the required parameter 'include_assignment_links' is set
        if ($include_assignment_links === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_assignment_links when calling retrieveAssignment'
            );
        }
        // verify the required parameter 'include_assignment_files' is set
        if ($include_assignment_files === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_assignment_files when calling retrieveAssignment'
            );
        }
        // verify the required parameter 'include_assignment_files_meta_data' is set
        if ($include_assignment_files_meta_data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_assignment_files_meta_data when calling retrieveAssignment'
            );
        }
        // verify the required parameter 'include_assignment_files_meta_data_objects' is set
        if ($include_assignment_files_meta_data_objects === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $include_assignment_files_meta_data_objects when calling retrieveAssignment'
            );
        }

        $resourcePath = '/assignment/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_assignment_links !== null) {
            $queryParams['include_assignment_links'] = ObjectSerializer::toQueryValue($include_assignment_links);
        }
        // query params
        if ($include_assignment_files !== null) {
            $queryParams['include_assignment_files'] = ObjectSerializer::toQueryValue($include_assignment_files);
        }
        // query params
        if ($include_assignment_files_meta_data !== null) {
            $queryParams['include_assignment_files_meta_data'] = ObjectSerializer::toQueryValue($include_assignment_files_meta_data);
        }
        // query params
        if ($include_assignment_files_meta_data_objects !== null) {
            $queryParams['include_assignment_files_meta_data_objects'] = ObjectSerializer::toQueryValue($include_assignment_files_meta_data_objects);
        }

        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveListAssignment
     *
     * Retrieve List of Assignments
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentRetrieveListArguments $arguments Assignment RetrieveList Arguments (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\AssignmentListResponse
     */
    public function retrieveListAssignment($arguments)
    {
        list($response) = $this->retrieveListAssignmentWithHttpInfo($arguments);
        return $response;
    }

    /**
     * Operation retrieveListAssignmentWithHttpInfo
     *
     * Retrieve List of Assignments
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentRetrieveListArguments $arguments Assignment RetrieveList Arguments (required)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\AssignmentListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveListAssignmentWithHttpInfo($arguments)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\AssignmentListResponse';
        $request = $this->retrieveListAssignmentRequest($arguments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\AssignmentListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveListAssignmentAsync
     *
     * Retrieve List of Assignments
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentRetrieveListArguments $arguments Assignment RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveListAssignmentAsync($arguments)
    {
        return $this->retrieveListAssignmentAsyncWithHttpInfo($arguments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveListAssignmentAsyncWithHttpInfo
     *
     * Retrieve List of Assignments
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentRetrieveListArguments $arguments Assignment RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveListAssignmentAsyncWithHttpInfo($arguments)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\AssignmentListResponse';
        $request = $this->retrieveListAssignmentRequest($arguments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveListAssignment'
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentRetrieveListArguments $arguments Assignment RetrieveList Arguments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveListAssignmentRequest($arguments)
    {
        // verify the required parameter 'arguments' is set
        if ($arguments === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $arguments when calling retrieveListAssignment'
            );
        }

        $resourcePath = '/assignment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($arguments)) {
            $_tempBody = $arguments;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAssignment
     *
     * Set (create or update) an Assignment
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function setAssignment($body = null)
    {
        list($response) = $this->setAssignmentWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation setAssignmentWithHttpInfo
     *
     * Set (create or update) an Assignment
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAssignmentWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->setAssignmentRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAssignmentAsync
     *
     * Set (create or update) an Assignment
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAssignmentAsync($body = null)
    {
        return $this->setAssignmentAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAssignmentAsyncWithHttpInfo
     *
     * Set (create or update) an Assignment
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAssignmentAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->setAssignmentRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAssignment'
     *
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setAssignmentRequest($body = null)
    {

        $resourcePath = '/assignment/set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAssignment
     *
     * Update a assignment
     *
     * @param  int $assignment_id ID of assignment to update (required)
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object that needs to be updated (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BumbalClient\BumbalClient\Model\ApiResponse
     */
    public function updateAssignment($assignment_id, $body = null)
    {
        list($response) = $this->updateAssignmentWithHttpInfo($assignment_id, $body);
        return $response;
    }

    /**
     * Operation updateAssignmentWithHttpInfo
     *
     * Update a assignment
     *
     * @param  int $assignment_id ID of assignment to update (required)
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object that needs to be updated (optional)
     *
     * @throws \BumbalClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BumbalClient\BumbalClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssignmentWithHttpInfo($assignment_id, $body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->updateAssignmentRequest($assignment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BumbalClient\BumbalClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssignmentAsync
     *
     * Update a assignment
     *
     * @param  int $assignment_id ID of assignment to update (required)
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object that needs to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssignmentAsync($assignment_id, $body = null)
    {
        return $this->updateAssignmentAsyncWithHttpInfo($assignment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAssignmentAsyncWithHttpInfo
     *
     * Update a assignment
     *
     * @param  int $assignment_id ID of assignment to update (required)
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object that needs to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssignmentAsyncWithHttpInfo($assignment_id, $body = null)
    {
        $returnType = '\BumbalClient\BumbalClient\Model\ApiResponse';
        $request = $this->updateAssignmentRequest($assignment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAssignment'
     *
     * @param  int $assignment_id ID of assignment to update (required)
     * @param  \BumbalClient\BumbalClient\Model\AssignmentModel $body Assignment object that needs to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAssignmentRequest($assignment_id, $body = null)
    {
        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling updateAssignment'
            );
        }

        $resourcePath = '/assignment/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ApiKey');
        if ($apiKey !== null) {
            $headers['ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
