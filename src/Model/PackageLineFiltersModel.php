<?php
/**
 * PackageLineFiltersModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * PackageLineFiltersModel Class Doc Comment
 *
 * @category    Class */
/**
 * @package     BumbalClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PackageLineFiltersModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PackageLineFiltersModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'updated_at_since' => '\DateTime',
        'updated_at_till' => '\DateTime',
        'nr_of_packages' => 'int',
        'length' => 'float',
        'width' => 'float',
        'height' => 'float',
        'unit_volume' => 'float',
        'net_weight_unit' => 'float',
        'net_weight_total' => 'float',
        'tare_weight_unit' => 'float',
        'tare_weight_total' => 'float',
        'gross_weight_unit' => 'float',
        'gross_weight_total' => 'float',
        'unit_loading_meter' => 'float',
        'barcode' => 'string[]',
        'adr' => 'bool',
        'temp' => 'bool',
        'temp_min' => 'float',
        'temp_max' => 'float',
        'capacity_volume' => 'float',
        'capacity_loading_meter' => 'float',
        'capacity_loading_weight' => 'float',
        'description' => 'string',
        'links' => '\BumbalClient\Model\LinkModel[]',
        'activity_id' => 'int[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'updated_at_since' => 'updated_at_since',
        'updated_at_till' => 'updated_at_till',
        'nr_of_packages' => 'nr_of_packages',
        'length' => 'length',
        'width' => 'width',
        'height' => 'height',
        'unit_volume' => 'unit_volume',
        'net_weight_unit' => 'net_weight_unit',
        'net_weight_total' => 'net_weight_total',
        'tare_weight_unit' => 'tare_weight_unit',
        'tare_weight_total' => 'tare_weight_total',
        'gross_weight_unit' => 'gross_weight_unit',
        'gross_weight_total' => 'gross_weight_total',
        'unit_loading_meter' => 'unit_loading_meter',
        'barcode' => 'barcode',
        'adr' => 'ADR',
        'temp' => 'temp',
        'temp_min' => 'temp_min',
        'temp_max' => 'temp_max',
        'capacity_volume' => 'capacity_volume',
        'capacity_loading_meter' => 'capacity_loading_meter',
        'capacity_loading_weight' => 'capacity_loading_weight',
        'description' => 'description',
        'links' => 'links',
        'activity_id' => 'activity_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'updated_at_since' => 'setUpdatedAtSince',
        'updated_at_till' => 'setUpdatedAtTill',
        'nr_of_packages' => 'setNrOfPackages',
        'length' => 'setLength',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'unit_volume' => 'setUnitVolume',
        'net_weight_unit' => 'setNetWeightUnit',
        'net_weight_total' => 'setNetWeightTotal',
        'tare_weight_unit' => 'setTareWeightUnit',
        'tare_weight_total' => 'setTareWeightTotal',
        'gross_weight_unit' => 'setGrossWeightUnit',
        'gross_weight_total' => 'setGrossWeightTotal',
        'unit_loading_meter' => 'setUnitLoadingMeter',
        'barcode' => 'setBarcode',
        'adr' => 'setAdr',
        'temp' => 'setTemp',
        'temp_min' => 'setTempMin',
        'temp_max' => 'setTempMax',
        'capacity_volume' => 'setCapacityVolume',
        'capacity_loading_meter' => 'setCapacityLoadingMeter',
        'capacity_loading_weight' => 'setCapacityLoadingWeight',
        'description' => 'setDescription',
        'links' => 'setLinks',
        'activity_id' => 'setActivityId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'updated_at_since' => 'getUpdatedAtSince',
        'updated_at_till' => 'getUpdatedAtTill',
        'nr_of_packages' => 'getNrOfPackages',
        'length' => 'getLength',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'unit_volume' => 'getUnitVolume',
        'net_weight_unit' => 'getNetWeightUnit',
        'net_weight_total' => 'getNetWeightTotal',
        'tare_weight_unit' => 'getTareWeightUnit',
        'tare_weight_total' => 'getTareWeightTotal',
        'gross_weight_unit' => 'getGrossWeightUnit',
        'gross_weight_total' => 'getGrossWeightTotal',
        'unit_loading_meter' => 'getUnitLoadingMeter',
        'barcode' => 'getBarcode',
        'adr' => 'getAdr',
        'temp' => 'getTemp',
        'temp_min' => 'getTempMin',
        'temp_max' => 'getTempMax',
        'capacity_volume' => 'getCapacityVolume',
        'capacity_loading_meter' => 'getCapacityLoadingMeter',
        'capacity_loading_weight' => 'getCapacityLoadingWeight',
        'description' => 'getDescription',
        'links' => 'getLinks',
        'activity_id' => 'getActivityId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['updated_at_since'] = isset($data['updated_at_since']) ? $data['updated_at_since'] : null;
        $this->container['updated_at_till'] = isset($data['updated_at_till']) ? $data['updated_at_till'] : null;
        $this->container['nr_of_packages'] = isset($data['nr_of_packages']) ? $data['nr_of_packages'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['unit_volume'] = isset($data['unit_volume']) ? $data['unit_volume'] : null;
        $this->container['net_weight_unit'] = isset($data['net_weight_unit']) ? $data['net_weight_unit'] : null;
        $this->container['net_weight_total'] = isset($data['net_weight_total']) ? $data['net_weight_total'] : null;
        $this->container['tare_weight_unit'] = isset($data['tare_weight_unit']) ? $data['tare_weight_unit'] : null;
        $this->container['tare_weight_total'] = isset($data['tare_weight_total']) ? $data['tare_weight_total'] : null;
        $this->container['gross_weight_unit'] = isset($data['gross_weight_unit']) ? $data['gross_weight_unit'] : null;
        $this->container['gross_weight_total'] = isset($data['gross_weight_total']) ? $data['gross_weight_total'] : null;
        $this->container['unit_loading_meter'] = isset($data['unit_loading_meter']) ? $data['unit_loading_meter'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['adr'] = isset($data['adr']) ? $data['adr'] : null;
        $this->container['temp'] = isset($data['temp']) ? $data['temp'] : null;
        $this->container['temp_min'] = isset($data['temp_min']) ? $data['temp_min'] : null;
        $this->container['temp_max'] = isset($data['temp_max']) ? $data['temp_max'] : null;
        $this->container['capacity_volume'] = isset($data['capacity_volume']) ? $data['capacity_volume'] : null;
        $this->container['capacity_loading_meter'] = isset($data['capacity_loading_meter']) ? $data['capacity_loading_meter'] : null;
        $this->container['capacity_loading_weight'] = isset($data['capacity_loading_weight']) ? $data['capacity_loading_weight'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets updated_at_since
     * @return \DateTime
     */
    public function getUpdatedAtSince()
    {
        return $this->container['updated_at_since'];
    }

    /**
     * Sets updated_at_since
     * @param \DateTime $updated_at_since Show updated since
     * @return $this
     */
    public function setUpdatedAtSince($updated_at_since)
    {
        $this->container['updated_at_since'] = $updated_at_since;

        return $this;
    }

    /**
     * Gets updated_at_till
     * @return \DateTime
     */
    public function getUpdatedAtTill()
    {
        return $this->container['updated_at_till'];
    }

    /**
     * Sets updated_at_till
     * @param \DateTime $updated_at_till Show updated till
     * @return $this
     */
    public function setUpdatedAtTill($updated_at_till)
    {
        $this->container['updated_at_till'] = $updated_at_till;

        return $this;
    }

    /**
     * Gets nr_of_packages
     * @return int
     */
    public function getNrOfPackages()
    {
        return $this->container['nr_of_packages'];
    }

    /**
     * Sets nr_of_packages
     * @param int $nr_of_packages Number of packages in package line
     * @return $this
     */
    public function setNrOfPackages($nr_of_packages)
    {
        $this->container['nr_of_packages'] = $nr_of_packages;

        return $this;
    }

    /**
     * Gets length
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     * @param float $length length of a single package
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     * @return float
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param float $width width of a single package
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     * @return float
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param float $height height of a single package
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets unit_volume
     * @return float
     */
    public function getUnitVolume()
    {
        return $this->container['unit_volume'];
    }

    /**
     * Sets unit_volume
     * @param float $unit_volume volume of a single package
     * @return $this
     */
    public function setUnitVolume($unit_volume)
    {
        $this->container['unit_volume'] = $unit_volume;

        return $this;
    }

    /**
     * Gets net_weight_unit
     * @return float
     */
    public function getNetWeightUnit()
    {
        return $this->container['net_weight_unit'];
    }

    /**
     * Sets net_weight_unit
     * @param float $net_weight_unit net weight of a single package
     * @return $this
     */
    public function setNetWeightUnit($net_weight_unit)
    {
        $this->container['net_weight_unit'] = $net_weight_unit;

        return $this;
    }

    /**
     * Gets net_weight_total
     * @return float
     */
    public function getNetWeightTotal()
    {
        return $this->container['net_weight_total'];
    }

    /**
     * Sets net_weight_total
     * @param float $net_weight_total net weight of a all packages
     * @return $this
     */
    public function setNetWeightTotal($net_weight_total)
    {
        $this->container['net_weight_total'] = $net_weight_total;

        return $this;
    }

    /**
     * Gets tare_weight_unit
     * @return float
     */
    public function getTareWeightUnit()
    {
        return $this->container['tare_weight_unit'];
    }

    /**
     * Sets tare_weight_unit
     * @param float $tare_weight_unit tare weight of a single package
     * @return $this
     */
    public function setTareWeightUnit($tare_weight_unit)
    {
        $this->container['tare_weight_unit'] = $tare_weight_unit;

        return $this;
    }

    /**
     * Gets tare_weight_total
     * @return float
     */
    public function getTareWeightTotal()
    {
        return $this->container['tare_weight_total'];
    }

    /**
     * Sets tare_weight_total
     * @param float $tare_weight_total tare weight of a all packages
     * @return $this
     */
    public function setTareWeightTotal($tare_weight_total)
    {
        $this->container['tare_weight_total'] = $tare_weight_total;

        return $this;
    }

    /**
     * Gets gross_weight_unit
     * @return float
     */
    public function getGrossWeightUnit()
    {
        return $this->container['gross_weight_unit'];
    }

    /**
     * Sets gross_weight_unit
     * @param float $gross_weight_unit gross weight of a single package
     * @return $this
     */
    public function setGrossWeightUnit($gross_weight_unit)
    {
        $this->container['gross_weight_unit'] = $gross_weight_unit;

        return $this;
    }

    /**
     * Gets gross_weight_total
     * @return float
     */
    public function getGrossWeightTotal()
    {
        return $this->container['gross_weight_total'];
    }

    /**
     * Sets gross_weight_total
     * @param float $gross_weight_total gross weight of a all packages
     * @return $this
     */
    public function setGrossWeightTotal($gross_weight_total)
    {
        $this->container['gross_weight_total'] = $gross_weight_total;

        return $this;
    }

    /**
     * Gets unit_loading_meter
     * @return float
     */
    public function getUnitLoadingMeter()
    {
        return $this->container['unit_loading_meter'];
    }

    /**
     * Sets unit_loading_meter
     * @param float $unit_loading_meter loading meter of a single package
     * @return $this
     */
    public function setUnitLoadingMeter($unit_loading_meter)
    {
        $this->container['unit_loading_meter'] = $unit_loading_meter;

        return $this;
    }

    /**
     * Gets barcode
     * @return string[]
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     * @param string[] $barcode barcode for packages
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets adr
     * @return bool
     */
    public function getAdr()
    {
        return $this->container['adr'];
    }

    /**
     * Sets adr
     * @param bool $adr boolean for whether or not the packages in package line should be considered as ADR
     * @return $this
     */
    public function setAdr($adr)
    {
        $this->container['adr'] = $adr;

        return $this;
    }

    /**
     * Gets temp
     * @return bool
     */
    public function getTemp()
    {
        return $this->container['temp'];
    }

    /**
     * Sets temp
     * @param bool $temp boolean for whether or not the packages in package line should be considered as temperature dependent
     * @return $this
     */
    public function setTemp($temp)
    {
        $this->container['temp'] = $temp;

        return $this;
    }

    /**
     * Gets temp_min
     * @return float
     */
    public function getTempMin()
    {
        return $this->container['temp_min'];
    }

    /**
     * Sets temp_min
     * @param float $temp_min minimum temperature for packages in package line
     * @return $this
     */
    public function setTempMin($temp_min)
    {
        $this->container['temp_min'] = $temp_min;

        return $this;
    }

    /**
     * Gets temp_max
     * @return float
     */
    public function getTempMax()
    {
        return $this->container['temp_max'];
    }

    /**
     * Sets temp_max
     * @param float $temp_max maximum temperature for packages in package line
     * @return $this
     */
    public function setTempMax($temp_max)
    {
        $this->container['temp_max'] = $temp_max;

        return $this;
    }

    /**
     * Gets capacity_volume
     * @return float
     */
    public function getCapacityVolume()
    {
        return $this->container['capacity_volume'];
    }

    /**
     * Sets capacity_volume
     * @param float $capacity_volume total volume for all packages in package line, used for any capacity related calculations
     * @return $this
     */
    public function setCapacityVolume($capacity_volume)
    {
        $this->container['capacity_volume'] = $capacity_volume;

        return $this;
    }

    /**
     * Gets capacity_loading_meter
     * @return float
     */
    public function getCapacityLoadingMeter()
    {
        return $this->container['capacity_loading_meter'];
    }

    /**
     * Sets capacity_loading_meter
     * @param float $capacity_loading_meter total loading meter for all packages in package line, used for any capacity related calculations
     * @return $this
     */
    public function setCapacityLoadingMeter($capacity_loading_meter)
    {
        $this->container['capacity_loading_meter'] = $capacity_loading_meter;

        return $this;
    }

    /**
     * Gets capacity_loading_weight
     * @return float
     */
    public function getCapacityLoadingWeight()
    {
        return $this->container['capacity_loading_weight'];
    }

    /**
     * Sets capacity_loading_weight
     * @param float $capacity_loading_weight total weight for all packages in package line, used for any capacity related calculations
     * @return $this
     */
    public function setCapacityLoadingWeight($capacity_loading_weight)
    {
        $this->container['capacity_loading_weight'] = $capacity_loading_weight;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description description of this package_line
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets links
     * @return \BumbalClient\Model\LinkModel[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \BumbalClient\Model\LinkModel[] $links 
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets activity_id
     * @return int[]
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     * @param int[] $activity_id Activity id
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}
